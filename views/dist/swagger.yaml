openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:3000
info:
  description: Test APIs document Swagger
  version: "1.0.0"
  title: Thu vien sach APIs document Swagger
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: "/v2"
tags:
  - name: top
    description: top room
  - name: user
    description: user detail
  - name: sign
paths:
  /api/top:
    post:
      tags:
        - top
      summary: Create new top
      description: I can upload file path so use http://localhost:3000/admin/create This can not contain image url.
      operationId: createTop
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clothes'
        description: Created user object
        required: true
  /api/top/{id}:
    get:
      tags:
      - top
      summary: "Find top by ID"
      description: "Returns a single top"
      operationId: "getTopById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of top to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/Clothes"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "top not found"
    put:
      tags:
        - top
      summary: Update top detail with form data
      description: This can only be done by the admin.
      operationId: updateTop
      parameters:
      - name: "id"
        in: "path"
        description: "ID of top that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clothes'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - top
      summary: "Deletes a top"
      description: ""
      operationId: "deleteTop"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "top id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "top not found"
  /api/user/{id}:
    get:
      tags:
      - user
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
    put:
      tags:
        - user
      summary: Update user detail with form data
      description: This can only be done by the admin.
      operationId: updateUser
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - user
      summary: "Deletes a user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "user id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /api/sign/in:
    post:
      tags:
        - sign
      summary: Check user authenication
      description: This can only check user email and return true or false
      operationId: signIn
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /api/refinement:
    post:
      tags:
        - refinement
      summary: Filter product by selected refinement 
      description: Enter your selection
      operationId: Refinment
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refinement'
        description: 
        required: true
components:
  schemas:
    Clothes:
      type: object
      properties:
        name:
          type: string
        desc:
          type: string
        price:
          type: string
        imageUrl:
          type: string
        color:
          type: string
        category:
          type: string
        refinement:
          type: string
        sale:
          type: Boolean
        imageItem:
          type: Array
        date:
          type: string
      xml:
        name: User
    User:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        password:
          type: string
        address:
          type: string
        cart:
          type: Array
        image:
          type: string
    Refinement:
      type: object
      properties:
        price:
          type: Array
        color:
          type: String
      xml:
        name: User
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    test_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://test-swagger.herokuapp.com'
          scopes:
            'write:users': modify your account
            'read:users': read your information
    api_key:
      type: apiKey
      name: api_key
      in: header