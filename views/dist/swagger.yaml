openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:3000
info:
  description: Test APIs document Swagger
  version: "1.0.0"
  title: Thu vien sach APIs document Swagger
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v2"
tags:
  - name: product
    description: product room
  - name: user
    description: user detail
  - name: sign
paths:
  /api/product/database:
    get:
      tags:
        - database
      summary: "Show all product database"
      description: "Returns all json products"
      operationId: "productDatabase"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/Clothes"
        "400":
          description: "Errors"
        "404":
          description: "Error"
  /api/user/database:
    get:
      tags:
        - database
      summary: "Show all user database"
      description: "Returns all json users"
      operationId: "userDatabase"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/Clothes"
        "400":
          description: "Errors"
        "404":
          description: "Error"
  /api/product:
    post:
      tags:
        - product
      summary: Create new product
      description: I can upload file path so use http://localhost:3000/admin/create This can not contain image url.
      operationId: createproduct
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Clothes"
        description: Created user object
        required: true
  /api/product/find:
    post:
      tags:
        - product
      summary: Find all matched product from query
      description: Return all matched json products
      operationId: finProduct
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Clothes"
        description: Created user object
        required: true
  /api/product/{id}:
    get:
      tags:
        - product
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getproductById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/Clothes"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "product not found"
    put:
      tags:
        - product
      summary: Update product detail with form data
      description: This can only be done by the admin.
      operationId: updateproduct
      parameters:
        - name: "id"
          in: "path"
          description: "ID of product that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Clothes"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - product
      summary: "Deletes a product"
      description: ""
      operationId: "deleteproduct"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "product id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "product not found"
  /api/user/{id}:
    get:
      tags:
        - user
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/components/schemas/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
    put:
      tags:
        - user
      summary: Update user detail with form data
      description: This can only be done by the admin.
      operationId: updateUser
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: "Deletes a user"
      description: ""
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "user id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "user not found"
  /user/profile/{id}:
    post:
      tags:
        - user
      summary: Update user details (with avatar upload)
      description: This update user details through user form.
      operationId: updateByUserForm
      responses:
        default:
          description: successful operation
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Update user object
        required: true
  /api/sign/in:
    post:
      tags:
        - sign
      summary: Check user authenication
      description: This can only check user email and return true or false
      operationId: signIn
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
  /api/refinement:
    post:
      tags:
        - refinement
      summary: Filter product by selected refinement
      description: Enter your selection
      operationId: Refinement
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Refinement"
        description:
        required: true
  /api/refinement/sort:
    post:
      tags:
        - refinement
      summary: Filter product by selected refinement and sort them then
      description: Enter your selection
      operationId: Refinement
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Refinement"
        description:
        required: true
components:
  schemas:
    Clothes:
      type: object
      properties:
        name:
          type: string
        desc:
          type: string
        price:
          type: string
        imageUrl:
          type: string
        color:
          type: string
        colorPicker:
          type: array
          items:
            type: string
        category:
          type: string
        type:
          type: string
        sale:
          type: boolean
          default: false
        imageItem:
          type: array
          items:
            type: string
        date:
          type: string
      xml:
        name: User
    User:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        password:
          type: string
        dob:
          type: string
        avatar:
          type: string
        address:
          type: string
        cart:
          type: array
          items:
            type: string
    Refinement:
      type: object
      properties:
        type:
          type: string
        price:
          type: array
          items:
            type: string
        color:
          type: string
      xml:
        name: User
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
  securitySchemes:
    test_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "http://test-swagger.herokuapp.com"
          scopes:
            "write:users": modify your account
            "read:users": read your information
    api_key:
      type: apiKey
      name: api_key
      in: header
